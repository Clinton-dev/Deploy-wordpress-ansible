- name: Setup WordPress on Ubuntu 22.04
  hosts: production_servers
  become: yes
  vars_files:
    - vars/vars.yml

  tasks:
    - name: Create a new database
      community.mysql.mysql_db:
        name: "{{ db_name }}"
        state: present
        login_user: root
        login_unix_socket: /var/run/mysqld/mysqld.sock
      become: yes

    - name: Create Database User
      community.mysql.mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        priv: "{{ db_name }}.*:ALL"
        state: present
        login_unix_socket: /var/run/mysqld/mysqld.sock
      become: yes

    - name: Create HTML directory
      file:
        path: "/var/www/html/{{ domain_name }}"
        state: directory
        owner: www-data
        group: www-data
        mode: 0755

    - name: Check if wordpress is already downloaded
      ansible.builtin.stat:
        path: "tmp/latest.tar.gz"
      register: stat_result

    - name: Download Wordpress  if not present
      get_url:
        url: "https://wordpress.org/latest.tar.gz"
        dest: "/tmp/latest.tar.gz"
        mode: 0644
      when: not stat_result.stat.exists

    - name: Extract Wordpress
      unarchive:
        src: "/tmp/latest.tar.gz"
        dest: "/var/www/html/{{ domain_name }}"
        group: www-data
        owner: www-data
        remote_src: yes
        extra_opts: [ --strip-components=1 ]
        creates: "/var/www/html/{{ domain_name }}/wp-settings.php"

    - name: Find wordpress archive
      find:
        paths: "/var/www/html/{{ domain_name }}"
        patterns: "*.tar.gz"
      register: archive_files

    - name: Delete archive
      file:
        state: absent
        path: "{{item.path}}"
      loop: "{{ archive_files.files }}"
      when: archive_files.files | length > 0

    - name: Check if wp-config.php exists
      stat:
        path: "/var/www/html/{{ domain_name }}/wp-config.php"
      register: wp_config

    - name: Copy wp-config-sample to wp-config.php
      copy:
        src: "/var/www/html/{{ domain_name }}/wp-config-sample.php"
        dest: "/var/www/html/{{ domain_name }}/wp-config.php"
        remote_src: yes
        group: www-data
        owner: www-data
        mode: 0644
      when: not wp_config.stat.exists

    - name: Update wp-config.php
      lineinfile:
        path: "/var/www/html/{{ domain_name }}/wp-config.php"
        regex: "define\\( '{{item.key}}', '.*' \\);"
        line: "define( '{{item.key}}', '{{ item.value }}' );"
      loop:
        - { key: 'DB_NAME', value: '{{ db_name }}' }
        - { key: 'DB_USER', value: '{{ db_user }}' }
        - { key: 'DB_PASSWORD', value: '{{ db_password }}' }

    - name: Fetch Wordpress salts
      uri:
        url: "https://api.wordpress.org/secret-key/1.1/salt/"
        return_content: true
      register: wp_salts

    - name: Parse WordPress salts into variables
      set_fact:
        auth_key: "{{ wp_salts.content | regex_search(\"define\\(\\s*'AUTH_KEY'\\s*,\\s*'([^']+)'\\s*\\);\", '\\1') }}"
        secure_auth_key: "{{ wp_salts.content | regex_search(\"define\\(\\s*'SECURE_AUTH_KEY'\\s*,\\s*'([^']+)'\\s*\\);\", '\\1') }}"
        logged_in_key: "{{ wp_salts.content | regex_search(\"define\\(\\s*'LOGGED_IN_KEY'\\s*,\\s*'([^']+)'\\s*\\);\", '\\1') }}"
        nonce_key: "{{ wp_salts.content | regex_search(\"define\\(\\s*'NONCE_KEY'\\s*,\\s*'([^']+)'\\s*\\);\", '\\1') }}"
        auth_salt: "{{ wp_salts.content | regex_search(\"define\\(\\s*'AUTH_SALT'\\s*,\\s*'([^']+)'\\s*\\);\", '\\1') }}"
        secure_auth_salt: "{{ wp_salts.content | regex_search(\"define\\(\\s*'SECURE_AUTH_SALT'\\s*,\\s*'([^']+)'\\s*\\);\", '\\1') }}"
        logged_in_salt: "{{ wp_salts.content | regex_search(\"define\\(\\s*'LOGGED_IN_SALT'\\s*,\\s*'([^']+)'\\s*\\);\", '\\1') }}"
        nonce_salt: "{{ wp_salts.content | regex_search(\"define\\(\\s*'NONCE_SALT'\\s*,\\s*'([^']+)'\\s*\\);\", '\\1') }}"


    - name: Set security keys wp-config.php
      lineinfile:
        path: "/var/www/html/{{ domain_name }}/wp-config.php"
        regexp: "^define\\(\\s*'{{ item.key }}'\\s*,\\s*'.*'\\s*\\);"
        line: "define( '{{ item.key }}', '{{ item.value | join('') }}' );"
      loop:
        - { key: 'AUTH_KEY', value: "{{ auth_key }}" }
        - { key: 'SECURE_AUTH_KEY', value: "{{ secure_auth_key }}" }
        - { key: 'LOGGED_IN_KEY', value: "{{ logged_in_key }}" }
        - { key: 'NONCE_KEY', value: "{{ nonce_key }}" }
        - { key: 'AUTH_SALT', value: "{{ auth_salt }}" }
        - { key: 'SECURE_AUTH_SALT', value: "{{ secure_auth_salt }}" }
        - { key: 'LOGGED_IN_SALT', value: "{{ logged_in_salt }}" }
        - { key: 'NONCE_SALT', value: "{{ nonce_salt }}" }

    - name: Setup nginx configurations
      template:
        src: templates/wordpress_nginx.j2
        dest: "/etc/nginx/sites-available/{{ domain_name }}.conf"
        owner: root
        group: root

    - name: Create symlink to sites-enabled
      file:
        src: "/etc/nginx/sites-available/{{ domain_name }}.conf"
        dest: "/etc/nginx/sites-enabled/{{ domain_name }}.conf"
        owner: root
        group: root
        state: link

    - name: Test Nginx configuration
      command: nginx -t
      register: nginx_test_result
      changed_when: false  # âœ… Correct keyword

    - name: Dislay Nginx test output
      debug:
        msg: "{{ nginx_test_result.stdout_lines }}"

    - name: Reload nginx if config is valid
      service:
        name: nginx
        state: reloaded
      when: nginx_test_result.rc == 0

    - name: Display site live URL
      debug:
        msg: "Your site is live at: http://{{ domain_name }} or https://{{ domain_name }}"
